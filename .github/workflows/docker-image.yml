name: Docker Build, Test and Push

on:
  push:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          cd src
          docker build -t fastp-trimmer:test .

      - name: Run functional tests
        run: |
          cd src
          mkdir -p test-output
          
          # 检查双端测试数据
          if [ -d "test-data/paired-end" ] && [ -n "$(find test-data/paired-end -maxdepth 1 -type f -name '*.fastq.gz' -print -quit)" ]; then
            echo "发现双端测试数据，开始处理..."
            docker run --rm \
              -v $(pwd)/test-data/paired-end:/mnt/in/paired \
              -v $(pwd)/test-output/paired:/mnt/out/paired \
              fastp-trimmer:test
            
            # 验证双端输出文件
            if [ -f test-output/paired/sample1_R1.fastq.gz ]; then
              echo "双端数据处理成功"
            else
              echo "警告：双端数据处理后未找到输出文件"
            fi
          else
            echo "没发现双端对应数据"
          fi
          
          # 检查单端测试数据
          if [ -d "test-data/single-end" ] && [ -n "$(find test-data/single-end -maxdepth 1 -type f -name '*.fastq.gz' -print -quit)" ]; then
            echo "发现单端测试数据，开始处理..."
            docker run --rm \
              -v $(pwd)/test-data/single-end:/mnt/in/single \
              -v $(pwd)/test-output/single:/mnt/out/single \
              fastp-trimmer:test
            
            # 验证单端输出文件
            if [ -f test-output/single/sample2.fastq.gz ]; then
              echo "单端数据处理成功"
            else
              echo "警告：单端数据处理后未找到输出文件"
            fi
          else
            echo "没发现单端对应数据"
          fi
          
          # 显示所有输出文件
          echo "生成的文件列表:"
          find test-output -type f

      - name: Push to Docker Hub
        if: success()
        run: |
          cd src
          # 设置环境变量
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          IMAGE_NAME="$DOCKERHUB_USERNAME/fastp-trimmer"
          
          # 标记镜像
          docker tag fastp-trimmer:test $IMAGE_NAME:${{ github.sha }}
          docker tag fastp-trimmer:test $IMAGE_NAME:latest
          
          # 使用官方登录动作替代命令行登录
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Push Docker images
        if: success()
        run: |
          cd src
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          IMAGE_NAME="$DOCKERHUB_USERNAME/fastp-trimmer"
          
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
